[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------< com.cryptowallet:crypto-wallet-backend >---------------
[INFO] Building crypto-wallet-backend 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ crypto-wallet-backend >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ crypto-wallet-backend ---
[INFO] Copying 2 resources from src/main/resources to target/classes
[INFO] Copying 0 resource from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ crypto-wallet-backend ---
[INFO] Changes detected - recompiling the module! :source
[INFO] Compiling 35 source files with javac [debug release 21] to target/classes
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/Admin.java:[42,23] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/Admin.java:[44,21] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/User.java:[42,21] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/User.java:[45,26] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/Wallet.java:[39,24] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/Wallet.java:[46,31] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/entity/Wallet.java:[48,21] @Builder will ignore the initializing expression entirely. If you want the initializing expression to serve as default, add @Builder.Default. If it is not supposed to be settable during building, make the field final.
[WARNING] /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/main/java/com/cryptowallet/config/SecurityConfig.java:[30,40] frameOptions() in org.springframework.security.config.annotation.web.configurers.HeadersConfigurer has been deprecated and marked for removal
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ crypto-wallet-backend ---
[INFO] skip non existing resourceDirectory /Users/archilodishelidze/Desktop/dev/cryptowallet/backend/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ crypto-wallet-backend ---
[INFO] Changes detected - recompiling the module! :dependency
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ crypto-wallet-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ crypto-wallet-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

[2m2025-09-19T12:51:56.817+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Starting CryptoWalletApplication using Java 23.0.2 with PID 42116 (/Users/archilodishelidze/Desktop/dev/cryptowallet/backend/target/classes started by archilodishelidze in /Users/archilodishelidze/Desktop/dev/cryptowallet/backend)
[2m2025-09-19T12:51:56.817+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Running with Spring Boot v3.2.0, Spring v6.1.1
[2m2025-09-19T12:51:56.817+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m The following 1 profile is active: "h2"
[2m2025-09-19T12:51:57.082+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.d.r.c.RepositoryConfigurationDelegate[0;39m [2m:[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[2m2025-09-19T12:51:57.105+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.d.r.c.RepositoryConfigurationDelegate[0;39m [2m:[0;39m Finished Spring Data repository scanning in 20 ms. Found 4 JPA repository interfaces.
[2m2025-09-19T12:51:57.321+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.w.embedded.tomcat.TomcatWebServer [0;39m [2m:[0;39m Tomcat initialized with port 8080 (http)
[2m2025-09-19T12:51:57.325+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.apache.catalina.core.StandardService  [0;39m [2m:[0;39m Starting service [Tomcat]
[2m2025-09-19T12:51:57.325+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.apache.catalina.core.StandardEngine   [0;39m [2m:[0;39m Starting Servlet engine: [Apache Tomcat/10.1.16]
[2m2025-09-19T12:51:57.352+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.a.c.c.C.[Tomcat].[localhost].[/]      [0;39m [2m:[0;39m Initializing Spring embedded WebApplicationContext
[2m2025-09-19T12:51:57.353+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mw.s.c.ServletWebServerApplicationContext[0;39m [2m:[0;39m Root WebApplicationContext: initialization completed in 516 ms
[2m2025-09-19T12:51:57.368+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Starting...
[2m2025-09-19T12:51:57.444+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.pool.HikariPool       [0;39m [2m:[0;39m HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:cryptowallet user=SA
[2m2025-09-19T12:51:57.444+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Start completed.
[2m2025-09-19T12:51:57.450+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.a.h2.H2ConsoleAutoConfiguration   [0;39m [2m:[0;39m H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:cryptowallet'
[2m2025-09-19T12:51:57.503+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.hibernate.jpa.internal.util.LogHelper [0;39m [2m:[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
[2m2025-09-19T12:51:57.532+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.Version                   [0;39m [2m:[0;39m HHH000412: Hibernate ORM core version 6.3.1.Final
[2m2025-09-19T12:51:57.545+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.h.c.internal.RegionFactoryInitiator   [0;39m [2m:[0;39m HHH000026: Second-level cache disabled
[2m2025-09-19T12:51:57.634+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.o.j.p.SpringPersistenceUnitInfo     [0;39m [2m:[0;39m No LoadTimeWeaver setup: ignoring JPA class transformer
[2m2025-09-19T12:51:57.655+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.orm.deprecation           [0;39m [2m:[0;39m HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
[2m2025-09-19T12:51:58.018+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.h.e.t.j.p.i.JtaPlatformInitiator      [0;39m [2m:[0;39m HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[2m2025-09-19T12:51:58.023+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists admins cascade 
Hibernate: 
    drop table if exists admins cascade 
[2m2025-09-19T12:51:58.025+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
[2m2025-09-19T12:51:58.025+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
[2m2025-09-19T12:51:58.025+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists wallets cascade 
Hibernate: 
    drop table if exists wallets cascade 
[2m2025-09-19T12:51:58.027+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table admins (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login timestamp(6),
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        role varchar(255) not null check (role in ('SUPER_ADMIN','ADMIN','MODERATOR','SUPPORT')),
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table admins (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        last_login timestamp(6),
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        role varchar(255) not null check (role in ('SUPER_ADMIN','ADMIN','MODERATOR','SUPPORT')),
        username varchar(255) not null unique,
        primary key (id)
    )
[2m2025-09-19T12:51:58.032+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table transactions (
        amount numeric(20,8) not null,
        confirmations integer,
        fee numeric(20,8),
        block_number bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        wallet_id bigint not null,
        from_address varchar(255) not null,
        memo varchar(255),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','FAILED')),
        to_address varchar(255) not null,
        tx_hash varchar(255) not null unique,
        type varchar(255) not null check (type in ('SEND','RECEIVE')),
        primary key (id)
    )
Hibernate: 
    create table transactions (
        amount numeric(20,8) not null,
        confirmations integer,
        fee numeric(20,8),
        block_number bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        wallet_id bigint not null,
        from_address varchar(255) not null,
        memo varchar(255),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','FAILED')),
        to_address varchar(255) not null,
        tx_hash varchar(255) not null unique,
        type varchar(255) not null check (type in ('SEND','RECEIVE')),
        primary key (id)
    )
[2m2025-09-19T12:51:58.033+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table users (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table users (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        username varchar(255) not null unique,
        primary key (id)
    )
[2m2025-09-19T12:51:58.034+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table wallets (
        active boolean,
        balance numeric(20,8),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint not null,
        address varchar(255) not null unique,
        currency varchar(255) not null check (currency in ('BITCOIN','USDT_TRC20')),
        private_key varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table wallets (
        active boolean,
        balance numeric(20,8),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint not null,
        address varchar(255) not null unique,
        currency varchar(255) not null check (currency in ('BITCOIN','USDT_TRC20')),
        private_key varchar(255) not null,
        primary key (id)
    )
[2m2025-09-19T12:51:58.035+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    alter table if exists transactions 
       add constraint FK23bop5lktue0o5q7kr19ti8h 
       foreign key (wallet_id) 
       references wallets
Hibernate: 
    alter table if exists transactions 
       add constraint FK23bop5lktue0o5q7kr19ti8h 
       foreign key (wallet_id) 
       references wallets
[2m2025-09-19T12:51:58.038+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    alter table if exists wallets 
       add constraint FKc1foyisidw7wqqrkamafuwn4e 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists wallets 
       add constraint FKc1foyisidw7wqqrkamafuwn4e 
       foreign key (user_id) 
       references users
[2m2025-09-19T12:51:58.040+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mj.LocalContainerEntityManagerFactoryBean[0;39m [2m:[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
[2m2025-09-19T12:51:58.171+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.d.j.r.query.QueryEnhancerFactory    [0;39m [2m:[0;39m Hibernate is in classpath; If applicable, HQL parser will be used.
[2m2025-09-19T12:51:58.682+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mJpaBaseConfiguration$JpaWebConfiguration[0;39m [2m:[0;39m spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[2m2025-09-19T12:51:58.689+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.s.UserDetailsServiceAutoConfiguration[0;39m [2m:[0;39m 

Using generated security password: acaffd59-5e9d-459c-87b4-a51edcc381ed

This generated password is for development use only. Your security configuration must be updated before running your application in production.

[2m2025-09-19T12:51:58.800+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.s.web.DefaultSecurityFilterChain    [0;39m [2m:[0;39m Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@418e1cd6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@26505df2, org.springframework.security.web.context.SecurityContextHolderFilter@7d45ffd, org.springframework.security.web.header.HeaderWriterFilter@52bf434b, org.springframework.web.filter.CorsFilter@6a584533, org.springframework.security.web.authentication.logout.LogoutFilter@13666880, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@60a4f677, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7335164e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cfb035c, org.springframework.security.web.access.ExceptionTranslationFilter@15c8bb25, org.springframework.security.web.access.intercept.AuthorizationFilter@15fe48f5]
[2m2025-09-19T12:51:58.879+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.w.embedded.tomcat.TomcatWebServer [0;39m [2m:[0;39m Tomcat started on port 8080 (http) with context path ''
[2m2025-09-19T12:51:58.883+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Started CryptoWalletApplication in 2.226 seconds (process running for 2.396)
[2m2025-09-19T12:52:21.723+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.a.c.c.C.[Tomcat].[localhost].[/]      [0;39m [2m:[0;39m Initializing Spring DispatcherServlet 'dispatcherServlet'
[2m2025-09-19T12:52:21.723+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.web.servlet.DispatcherServlet       [0;39m [2m:[0;39m Initializing Servlet 'dispatcherServlet'
[2m2025-09-19T12:52:21.724+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.web.servlet.DispatcherServlet       [0;39m [2m:[0;39m Completed initialization in 1 ms
[2m2025-09-19T12:52:21.732+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.w.s.h.HandlerMappingIntrospector    [0;39m [2m:[0;39m Cache miss for REQUEST dispatch to '/api/admin/stats/count' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
[2m2025-09-19T12:52:21.772+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(a1_0.id) 
    from
        admins a1_0 
    where
        a1_0.active=true
Hibernate: 
    select
        count(a1_0.id) 
    from
        admins a1_0 
    where
        a1_0.active=true
[2m2025-09-19T12:52:40.281+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id 
    from
        admins a1_0 
    where
        a1_0.username=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id 
    from
        admins a1_0 
    where
        a1_0.username=? 
    fetch
        first ? rows only
[2m2025-09-19T12:52:40.282+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id 
    from
        admins a1_0 
    where
        a1_0.email=? 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id 
    from
        admins a1_0 
    where
        a1_0.email=? 
    fetch
        first ? rows only
[2m2025-09-19T12:52:40.390+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    insert 
    into
        admins
        (active, created_at, email, first_name, last_login, last_name, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        admins
        (active, created_at, email, first_name, last_login, last_name, password, role, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, default)
[2m2025-09-19T12:52:40.395+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36mcom.cryptowallet.service.AdminService   [0;39m [2m:[0;39m Admin registered successfully: admin with role: SUPER_ADMIN
[2m2025-09-19T12:52:47.498+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.username=?
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.username=?
[2m2025-09-19T12:52:47.592+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36mcom.cryptowallet.service.AdminService   [0;39m [2m:[0;39m Admin authenticated successfully: admin
[2m2025-09-19T12:52:47.596+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    update
        admins 
    set
        active=?,
        email=?,
        first_name=?,
        last_login=?,
        last_name=?,
        password=?,
        role=?,
        updated_at=?,
        username=? 
    where
        id=?
Hibernate: 
    update
        admins 
    set
        active=?,
        email=?,
        first_name=?,
        last_login=?,
        last_name=?,
        password=?,
        role=?,
        updated_at=?,
        username=? 
    where
        id=?
[2m2025-09-19T12:52:52.070+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(*) 
    from
        users u1_0
Hibernate: 
    select
        count(*) 
    from
        users u1_0
[2m2025-09-19T12:52:52.071+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.active
Hibernate: 
    select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.active
[2m2025-09-19T12:52:52.071+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(*) 
    from
        wallets w1_0
Hibernate: 
    select
        count(*) 
    from
        wallets w1_0
[2m2025-09-19T12:52:52.072+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(w1_0.id) 
    from
        wallets w1_0 
    where
        w1_0.currency=?
Hibernate: 
    select
        count(w1_0.id) 
    from
        wallets w1_0 
    where
        w1_0.currency=?
[2m2025-09-19T12:52:52.073+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(w1_0.id) 
    from
        wallets w1_0 
    where
        w1_0.currency=?
Hibernate: 
    select
        count(w1_0.id) 
    from
        wallets w1_0 
    where
        w1_0.currency=?
[2m2025-09-19T12:52:52.073+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(*) 
    from
        transactions t1_0
Hibernate: 
    select
        count(*) 
    from
        transactions t1_0
[2m2025-09-19T12:52:52.074+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
Hibernate: 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
[2m2025-09-19T12:52:52.074+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
Hibernate: 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
[2m2025-09-19T12:52:52.074+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
Hibernate: 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.status=?
[2m2025-09-19T12:52:52.078+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        coalesce(sum(t1_0.amount), 0) 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.currency=? 
        and t1_0.status=?
Hibernate: 
    select
        coalesce(sum(t1_0.amount), 0) 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.currency=? 
        and t1_0.status=?
[2m2025-09-19T12:52:52.079+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        coalesce(sum(t1_0.amount), 0) 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.currency=? 
        and t1_0.status=?
Hibernate: 
    select
        coalesce(sum(t1_0.amount), 0) 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.currency=? 
        and t1_0.status=?
[2m2025-09-19T12:52:52.080+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.created_at>?
Hibernate: 
    select
        count(u1_0.id) 
    from
        users u1_0 
    where
        u1_0.created_at>?
[2m2025-09-19T12:52:52.080+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.created_at>?
Hibernate: 
    select
        count(t1_0.id) 
    from
        transactions t1_0 
    where
        t1_0.created_at>?
[2m2025-09-19T12:53:08.431+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-8][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-09-19T12:53:08.439+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-9][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-09-19T12:53:27.934+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36m.w.s.m.s.DefaultHandlerExceptionResolver[0;39m [2m:[0;39m Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "login"]
[2m2025-09-19T12:53:34.053+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
[2m2025-09-19T12:54:48.986+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
[2m2025-09-19T12:54:49.142+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
[2m2025-09-19T12:54:49.824+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
[2m2025-09-19T12:55:58.712+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
Hibernate: 
    select
        a1_0.id,
        a1_0.active,
        a1_0.created_at,
        a1_0.email,
        a1_0.first_name,
        a1_0.last_login,
        a1_0.last_name,
        a1_0.password,
        a1_0.role,
        a1_0.updated_at,
        a1_0.username 
    from
        admins a1_0 
    where
        a1_0.active 
    order by
        a1_0.created_at desc 
    offset
        ? rows 
    fetch
        first ? rows only
[2m2025-09-19T12:55:59.120+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36m.w.s.m.s.DefaultHandlerExceptionResolver[0;39m [2m:[0;39m Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "login"]
[2m2025-09-19T12:56:14.814+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-7][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
[2m2025-09-19T12:56:14.816+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-7][0;39m [2m[0;39m[36mcom.cryptowallet.service.UserService    [0;39m [2m:[0;39m Authentication failed for username: admin
[2m2025-09-19T12:58:04.655+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
[2m2025-09-19T12:58:04.658+04:00[0;39m [33m WARN[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36mcom.cryptowallet.service.UserService    [0;39m [2m:[0;39m Authentication failed for username: admin
[2m2025-09-19T13:01:16.528+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mj.LocalContainerEntityManagerFactoryBean[0;39m [2m:[0;39m Closing JPA EntityManagerFactory for persistence unit 'default'
[2m2025-09-19T13:01:16.531+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists admins cascade 
Hibernate: 
    drop table if exists admins cascade 
[2m2025-09-19T13:01:16.533+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
[2m2025-09-19T13:01:16.534+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
[2m2025-09-19T13:01:16.534+04:00[0;39m [32mDEBUG[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists wallets cascade 
Hibernate: 
    drop table if exists wallets cascade 
[2m2025-09-19T13:01:16.537+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Shutdown initiated...
[2m2025-09-19T13:01:16.539+04:00[0;39m [32m INFO[0;39m [35m42116[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Shutdown completed.
