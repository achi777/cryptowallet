[INFO] Scanning for projects...
[INFO] 
[INFO] ---------------< com.cryptowallet:crypto-wallet-backend >---------------
[INFO] Building crypto-wallet-backend 0.0.1-SNAPSHOT
[INFO]   from pom.xml
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] >>> spring-boot:3.2.0:run (default-cli) > test-compile @ crypto-wallet-backend >>>
[INFO] 
[INFO] --- resources:3.3.1:resources (default-resources) @ crypto-wallet-backend ---
[INFO] Copying 1 resource from src/main/resources to target/classes
[INFO] Copying 0 resource from src/main/resources to target/classes
[INFO] 
[INFO] --- compiler:3.11.0:compile (default-compile) @ crypto-wallet-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- resources:3.3.1:testResources (default-testResources) @ crypto-wallet-backend ---
[INFO] skip non existing resourceDirectory /Users/archilodishelidze/Desktop/cryptowallet/backend/src/test/resources
[INFO] 
[INFO] --- compiler:3.11.0:testCompile (default-testCompile) @ crypto-wallet-backend ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< spring-boot:3.2.0:run (default-cli) < test-compile @ crypto-wallet-backend <<<
[INFO] 
[INFO] 
[INFO] --- spring-boot:3.2.0:run (default-cli) @ crypto-wallet-backend ---
[INFO] Attaching agents: []

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
[32m :: Spring Boot :: [39m              [2m (v3.2.0)[0;39m

[2m2025-06-11T19:11:05.919+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Starting CryptoWalletApplication using Java 23.0.2 with PID 74021 (/Users/archilodishelidze/Desktop/cryptowallet/backend/target/classes started by archilodishelidze in /Users/archilodishelidze/Desktop/cryptowallet/backend)
[2m2025-06-11T19:11:05.920+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Running with Spring Boot v3.2.0, Spring v6.1.1
[2m2025-06-11T19:11:05.920+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m No active profile set, falling back to 1 default profile: "default"
[2m2025-06-11T19:11:06.228+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.d.r.c.RepositoryConfigurationDelegate[0;39m [2m:[0;39m Bootstrapping Spring Data JPA repositories in DEFAULT mode.
[2m2025-06-11T19:11:06.261+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.d.r.c.RepositoryConfigurationDelegate[0;39m [2m:[0;39m Finished Spring Data repository scanning in 29 ms. Found 3 JPA repository interfaces.
[2m2025-06-11T19:11:06.503+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.w.embedded.tomcat.TomcatWebServer [0;39m [2m:[0;39m Tomcat initialized with port 8080 (http)
[2m2025-06-11T19:11:06.516+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.apache.catalina.core.StandardService  [0;39m [2m:[0;39m Starting service [Tomcat]
[2m2025-06-11T19:11:06.516+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.apache.catalina.core.StandardEngine   [0;39m [2m:[0;39m Starting Servlet engine: [Apache Tomcat/10.1.16]
[2m2025-06-11T19:11:06.548+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.a.c.c.C.[Tomcat].[localhost].[/]      [0;39m [2m:[0;39m Initializing Spring embedded WebApplicationContext
[2m2025-06-11T19:11:06.549+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mw.s.c.ServletWebServerApplicationContext[0;39m [2m:[0;39m Root WebApplicationContext: initialization completed in 604 ms
[2m2025-06-11T19:11:06.565+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Starting...
[2m2025-06-11T19:11:06.658+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.pool.HikariPool       [0;39m [2m:[0;39m HikariPool-1 - Added connection conn0: url=jdbc:h2:mem:testdb user=SA
[2m2025-06-11T19:11:06.658+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Start completed.
[2m2025-06-11T19:11:06.664+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.a.h2.H2ConsoleAutoConfiguration   [0;39m [2m:[0;39m H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:testdb'
[2m2025-06-11T19:11:06.720+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.hibernate.jpa.internal.util.LogHelper [0;39m [2m:[0;39m HHH000204: Processing PersistenceUnitInfo [name: default]
[2m2025-06-11T19:11:06.756+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.Version                   [0;39m [2m:[0;39m HHH000412: Hibernate ORM core version 6.3.1.Final
[2m2025-06-11T19:11:06.770+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.h.c.internal.RegionFactoryInitiator   [0;39m [2m:[0;39m HHH000026: Second-level cache disabled
[2m2025-06-11T19:11:06.867+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.o.j.p.SpringPersistenceUnitInfo     [0;39m [2m:[0;39m No LoadTimeWeaver setup: ignoring JPA class transformer
[2m2025-06-11T19:11:06.885+04:00[0;39m [33m WARN[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.orm.deprecation           [0;39m [2m:[0;39m HHH90000025: H2Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
[2m2025-06-11T19:11:07.236+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.h.e.t.j.p.i.JtaPlatformInitiator      [0;39m [2m:[0;39m HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
[2m2025-06-11T19:11:07.241+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
[2m2025-06-11T19:11:07.242+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
[2m2025-06-11T19:11:07.242+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists wallets cascade 
Hibernate: 
    drop table if exists wallets cascade 
[2m2025-06-11T19:11:07.245+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table transactions (
        amount numeric(20,8) not null,
        confirmations integer,
        fee numeric(20,8),
        block_number bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        wallet_id bigint not null,
        from_address varchar(255) not null,
        memo varchar(255),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','FAILED')),
        to_address varchar(255) not null,
        tx_hash varchar(255) not null unique,
        type varchar(255) not null check (type in ('SEND','RECEIVE')),
        primary key (id)
    )
Hibernate: 
    create table transactions (
        amount numeric(20,8) not null,
        confirmations integer,
        fee numeric(20,8),
        block_number bigint,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        wallet_id bigint not null,
        from_address varchar(255) not null,
        memo varchar(255),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','FAILED')),
        to_address varchar(255) not null,
        tx_hash varchar(255) not null unique,
        type varchar(255) not null check (type in ('SEND','RECEIVE')),
        primary key (id)
    )
[2m2025-06-11T19:11:07.250+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table users (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        username varchar(255) not null unique,
        primary key (id)
    )
Hibernate: 
    create table users (
        active boolean,
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        email varchar(255) not null unique,
        first_name varchar(255),
        last_name varchar(255),
        password varchar(255) not null,
        username varchar(255) not null unique,
        primary key (id)
    )
[2m2025-06-11T19:11:07.251+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    create table wallets (
        active boolean,
        balance numeric(20,8),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint not null,
        address varchar(255) not null unique,
        currency varchar(255) not null check (currency in ('BITCOIN','USDT_TRC20')),
        private_key varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table wallets (
        active boolean,
        balance numeric(20,8),
        created_at timestamp(6) not null,
        id bigint generated by default as identity,
        updated_at timestamp(6),
        user_id bigint not null,
        address varchar(255) not null unique,
        currency varchar(255) not null check (currency in ('BITCOIN','USDT_TRC20')),
        private_key varchar(255) not null,
        primary key (id)
    )
[2m2025-06-11T19:11:07.252+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    alter table if exists transactions 
       add constraint FK23bop5lktue0o5q7kr19ti8h 
       foreign key (wallet_id) 
       references wallets
Hibernate: 
    alter table if exists transactions 
       add constraint FK23bop5lktue0o5q7kr19ti8h 
       foreign key (wallet_id) 
       references wallets
[2m2025-06-11T19:11:07.255+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    alter table if exists wallets 
       add constraint FKc1foyisidw7wqqrkamafuwn4e 
       foreign key (user_id) 
       references users
Hibernate: 
    alter table if exists wallets 
       add constraint FKc1foyisidw7wqqrkamafuwn4e 
       foreign key (user_id) 
       references users
[2m2025-06-11T19:11:07.257+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mj.LocalContainerEntityManagerFactoryBean[0;39m [2m:[0;39m Initialized JPA EntityManagerFactory for persistence unit 'default'
[2m2025-06-11T19:11:07.389+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.d.j.r.query.QueryEnhancerFactory    [0;39m [2m:[0;39m Hibernate is in classpath; If applicable, HQL parser will be used.
[2m2025-06-11T19:11:07.675+04:00[0;39m [33m WARN[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mJpaBaseConfiguration$JpaWebConfiguration[0;39m [2m:[0;39m spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
[2m2025-06-11T19:11:07.682+04:00[0;39m [33m WARN[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36m.s.s.UserDetailsServiceAutoConfiguration[0;39m [2m:[0;39m 

Using generated security password: e43e7abf-eefa-4cd4-87e7-5b92a0a6031b

This generated password is for development use only. Your security configuration must be updated before running your application in production.

[2m2025-06-11T19:11:07.789+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.s.web.DefaultSecurityFilterChain    [0;39m [2m:[0;39m Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@38950138, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@99ace98, org.springframework.security.web.context.SecurityContextHolderFilter@7e383712, org.springframework.security.web.header.HeaderWriterFilter@7e147828, org.springframework.web.filter.CorsFilter@4104b6a6, org.springframework.security.web.authentication.logout.LogoutFilter@43f4621b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2e587292, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@36c763cd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@21dd405a, org.springframework.security.web.access.ExceptionTranslationFilter@7d90d4c6, org.springframework.security.web.access.intercept.AuthorizationFilter@578cd644]
[2m2025-06-11T19:11:07.868+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mo.s.b.w.embedded.tomcat.TomcatWebServer [0;39m [2m:[0;39m Tomcat started on port 8080 (http) with context path ''
[2m2025-06-11T19:11:07.872+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [           main][0;39m [2m[0;39m[36mc.cryptowallet.CryptoWalletApplication  [0;39m [2m:[0;39m Started CryptoWalletApplication in 2.157 seconds (process running for 2.317)
[2m2025-06-11T19:11:39.551+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.a.c.c.C.[Tomcat].[localhost].[/]      [0;39m [2m:[0;39m Initializing Spring DispatcherServlet 'dispatcherServlet'
[2m2025-06-11T19:11:39.551+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.web.servlet.DispatcherServlet       [0;39m [2m:[0;39m Initializing Servlet 'dispatcherServlet'
[2m2025-06-11T19:11:39.553+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.web.servlet.DispatcherServlet       [0;39m [2m:[0;39m Completed initialization in 1 ms
[2m2025-06-11T19:11:39.560+04:00[0;39m [33m WARN[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36mo.s.w.s.h.HandlerMappingIntrospector    [0;39m [2m:[0;39m Cache miss for REQUEST dispatch to '/api/users' (previous null). Performing MatchableHandlerMapping lookup. This is logged once only at WARN level, and every time at TRACE.
[2m2025-06-11T19:11:39.601+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0
[2m2025-06-11T19:12:38.353+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-3][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
[2m2025-06-11T19:12:38.357+04:00[0;39m [33m WARN[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-3][0;39m [2m[0;39m[36mcom.cryptowallet.service.UserService    [0;39m [2m:[0;39m Authentication failed for username: condor
[2m2025-06-11T19:13:05.079+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.username=? 
    fetch
        first ? rows only
[2m2025-06-11T19:13:05.081+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
Hibernate: 
    select
        u1_0.id 
    from
        users u1_0 
    where
        u1_0.email=? 
    fetch
        first ? rows only
[2m2025-06-11T19:13:05.187+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    insert 
    into
        users
        (active, created_at, email, first_name, last_name, password, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        users
        (active, created_at, email, first_name, last_name, password, updated_at, username, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
[2m2025-06-11T19:13:05.194+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36mcom.cryptowallet.service.UserService    [0;39m [2m:[0;39m User registered successfully: condor
[2m2025-06-11T19:13:05.303+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-7][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:05.308+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-8][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:07.390+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
[2m2025-06-11T19:13:07.519+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36mc.c.service.BitcoinWalletService        [0;39m [2m:[0;39m Generated Bitcoin key pair: bc1q03de5a844bf8edb640e1370c4eefb386
[2m2025-06-11T19:13:07.521+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
[2m2025-06-11T19:13:07.522+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [io-8080-exec-10][0;39m [2m[0;39m[36mcom.cryptowallet.service.WalletService  [0;39m [2m:[0;39m Wallet created successfully: bc1q03de5a844bf8edb640e1370c4eefb386 for user: condor
[2m2025-06-11T19:13:07.533+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:09.515+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
[2m2025-06-11T19:13:09.523+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36mc.c.service.TronWalletService           [0;39m [2m:[0;39m Generated Tron key pair: T7c6fdb14093dec2235c16830e6bc96a08f
[2m2025-06-11T19:13:09.524+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
[2m2025-06-11T19:13:09.525+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-4][0;39m [2m[0;39m[36mcom.cryptowallet.service.WalletService  [0;39m [2m:[0;39m Wallet created successfully: T7c6fdb14093dec2235c16830e6bc96a08f for user: condor
[2m2025-06-11T19:13:09.533+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-5][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:18.098+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-7][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:18.112+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-8][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:29.503+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-1][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.block_number,
        t1_0.confirmations,
        t1_0.created_at,
        t1_0.fee,
        t1_0.from_address,
        t1_0.memo,
        t1_0.status,
        t1_0.to_address,
        t1_0.tx_hash,
        t1_0.type,
        t1_0.wallet_id 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.user_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.block_number,
        t1_0.confirmations,
        t1_0.created_at,
        t1_0.fee,
        t1_0.from_address,
        t1_0.memo,
        t1_0.status,
        t1_0.to_address,
        t1_0.tx_hash,
        t1_0.type,
        t1_0.wallet_id 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.user_id=? 
    order by
        t1_0.created_at desc
[2m2025-06-11T19:13:29.513+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.block_number,
        t1_0.confirmations,
        t1_0.created_at,
        t1_0.fee,
        t1_0.from_address,
        t1_0.memo,
        t1_0.status,
        t1_0.to_address,
        t1_0.tx_hash,
        t1_0.type,
        t1_0.wallet_id 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.user_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.block_number,
        t1_0.confirmations,
        t1_0.created_at,
        t1_0.fee,
        t1_0.from_address,
        t1_0.memo,
        t1_0.status,
        t1_0.to_address,
        t1_0.tx_hash,
        t1_0.type,
        t1_0.wallet_id 
    from
        transactions t1_0 
    join
        wallets w1_0 
            on w1_0.id=t1_0.wallet_id 
    where
        w1_0.user_id=? 
    order by
        t1_0.created_at desc
[2m2025-06-11T19:13:44.181+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username 
    from
        users u1_0 
    where
        u1_0.username=?
[2m2025-06-11T19:13:44.189+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:44.307+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36mcom.cryptowallet.service.UserService    [0;39m [2m:[0;39m User authenticated successfully: condor
[2m2025-06-11T19:13:44.321+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-7][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:13:44.324+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-8][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:15:24.586+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.active,
        u1_0.created_at,
        u1_0.email,
        u1_0.first_name,
        u1_0.last_name,
        u1_0.password,
        u1_0.updated_at,
        u1_0.username,
        w1_0.user_id,
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at 
    from
        users u1_0 
    left join
        wallets w1_0 
            on u1_0.id=w1_0.user_id 
    where
        u1_0.id=?
[2m2025-06-11T19:15:24.594+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36mc.c.service.BitcoinWalletService        [0;39m [2m:[0;39m Generated Bitcoin key pair: bc1q02d6ba372ef711f05298e0ce63861bde
[2m2025-06-11T19:15:24.596+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    insert 
    into
        wallets
        (active, address, balance, created_at, currency, private_key, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, default)
[2m2025-06-11T19:15:24.598+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-2][0;39m [2m[0;39m[36mcom.cryptowallet.service.WalletService  [0;39m [2m:[0;39m Wallet created successfully: bc1q02d6ba372ef711f05298e0ce63861bde for user: condor
[2m2025-06-11T19:15:24.613+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-3][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:15:48.026+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-5][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:15:48.041+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [nio-8080-exec-6][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
Hibernate: 
    select
        w1_0.id,
        w1_0.active,
        w1_0.address,
        w1_0.balance,
        w1_0.created_at,
        w1_0.currency,
        w1_0.private_key,
        w1_0.updated_at,
        w1_0.user_id 
    from
        wallets w1_0 
    where
        w1_0.user_id=?
[2m2025-06-11T19:19:09.327+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mj.LocalContainerEntityManagerFactoryBean[0;39m [2m:[0;39m Closing JPA EntityManagerFactory for persistence unit 'default'
[2m2025-06-11T19:19:09.328+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists transactions cascade 
Hibernate: 
    drop table if exists transactions cascade 
[2m2025-06-11T19:19:09.331+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists users cascade 
Hibernate: 
    drop table if exists users cascade 
[2m2025-06-11T19:19:09.331+04:00[0;39m [32mDEBUG[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36morg.hibernate.SQL                       [0;39m [2m:[0;39m 
    drop table if exists wallets cascade 
Hibernate: 
    drop table if exists wallets cascade 
[2m2025-06-11T19:19:09.337+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Shutdown initiated...
[2m2025-06-11T19:19:09.339+04:00[0;39m [32m INFO[0;39m [35m74021[0;39m [2m---[0;39m [2m[crypto-wallet-backend] [ionShutdownHook][0;39m [2m[0;39m[36mcom.zaxxer.hikari.HikariDataSource      [0;39m [2m:[0;39m HikariPool-1 - Shutdown completed.
